environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\ethan\\AppData\\Roaming', 'AWS_ACCESS_KEY': 'ASIA37QOXM36APN6DIMC', 'AWS_SECRET_ACCESS_KEY': 'FomhhZaBzwVK7qLPIZajGN5laSSGg+EStGFBcEu+', 'AWS_SESSION_TOKEN': 'FwoGZXIvYXdzEMP//////////wEaDMDpVFvLC8YrhCbJ6SLLAcdn0ohef5ww0d7KinylnrQpgFN41R+T4HEW2ZKLAwXxeL4HvSj0NR3BenjvxKIlgAanQrXXRmY1HvEtiVgCcybSJK6yipE3SQx4Oag4eya3hkhOA5i7XW0GACNZ6NZVXEyt+Q0Ep0S556NiHGVxivRdb4f8sX8xNfVdJXfLpgZFeIutVcptAsdBLG/jn+xB4tJ2SPlQUfDYQHlWdamNMyRJlEtdaqZWWzc+AIyOx5U5RSRjCc0nPqFVex9XlE26MQE+mfQk0YtyFZIhKJ+0t40GMi0k1Hmdw3/G1AYDjZmIVFNV0Zr5SpmaT61Dt+vd+kYz0X7Cu/joR4mho0kiziY=', 'BESIEGE_GAME_ASSEMBLIES': 'C:/Games/Besiege.v1.05/Besiege_Data\\Managed/', 'BESIEGE_UNITY_ASSEMBLIES': 'C:/Games/Besiege.v1.05/Besiege_Data\\Managed/', 'CAMLIBS': 'C:\\Program Files\\darktable\\lib\\libgphoto2\\2.5.27', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': '132521055218815170', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'MSI', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'CONDA_SHLVL': '0', 'CONFIGSETROOT': 'C:\\WINDOWS\\ConfigSetRoot', 'CUDA_PATH': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8', 'CUDA_PATH_V11_2': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2', 'CUDA_PATH_V11_4': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4', 'CUDA_PATH_V11_8': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\ethan', 'IDEA_INITIAL_DIRECTORY': 'C:\\Program Files\\JetBrains\\PyCharm Community Edition 2021.3.2\\bin', 'IOLIBS': 'C:\\Program Files\\darktable\\lib\\libgphoto2_port\\0.12.0', 'LOCALAPPDATA': 'C:\\Users\\ethan\\AppData\\Local', 'LOGONSERVER': '\\\\MSI', 'MAGICK_HOME': 'C:\\Program Files\\darktable\\lib\\GraphicsMagick-1.3.36\\modules-Q8\\coders', 'NIEXTCCOMPILERSUPP': 'C:\\Program Files (x86)\\National Instruments\\Shared\\ExternalCompilerSupport\\C\\', 'NUMBER_OF_PROCESSORS': '12', 'NVCUDASAMPLES11_2_ROOT': 'C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v11.2', 'NVCUDASAMPLES11_4_ROOT': 'C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v11.4', 'NVCUDASAMPLES_ROOT': 'C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v11.2', 'NVTOOLSEXT_PATH': 'C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\', 'ONEDRIVE': 'C:\\Users\\ethan\\AP Hogeschool Antwerpen', 'ONEDRIVECOMMERCIAL': 'C:\\Users\\ethan\\AP Hogeschool Antwerpen', 'ONEDRIVECONSUMER': 'C:\\Users\\ethan\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\School\\Toegepaste_Informatica\\3ITCSC\\Ethical Hacking\\Python\\Project\\venv\\Scripts;C:\\Anaconda\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\libnvvp;C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\Eclipse Foundation\\jdk-8.0.302.8-hotspot\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\libnvvp;C:\\Python39\\Scripts\\;C:\\Python39\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\Microsoft Network Monitor 3\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\nodejs\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\R\\rtools40\\\\usr\\bin\\;C:\\Program Files\\PuTTY\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Mullvad VPN\\resources;C:\\Program Files\\Amazon\\AWSCLIV2\\;C:\\Program Files\\Amazon\\AWSSAMCLI\\bin\\;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Users\\ethan\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\ethan\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\ethan\\AppData\\Local\\GitHubDesktop\\bin;C:\\Program Files (x86)\\GitHub CLI\\;C:\\Users\\ethan\\.dotnet\\tools;C:\\Users\\ethan\\AppData\\Roaming\\npm;C:\\R\\rtools40\\\\usr\\bin\\;C:\\Users\\ethan\\AppData\\Local\\gitkraken\\bin;C:\\Users\\ethan\\.dotnet\\tools;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\libnvvp;', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 158 Stepping 10, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '9e0a', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '(venv) $P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PT8HOME': 'C:\\Program Files\\Cisco Packet Tracer 8.1.1', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM_HOSTED': '1', 'PYTHONIOENCODING': 'UTF-8', 'PYTHONPATH': 'C:\\School\\Toegepaste_Informatica\\3ITCSC\\Ethical Hacking\\Python\\Project', 'PYTHONUNBUFFERED': '1', 'QT_DEVICE_PIXEL_RATIO': 'auto', 'RTOOLS40_HOME': 'C:\\R\\rtools40\\', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\ethan\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\ethan\\AppData\\Local\\Temp', 'USERDOMAIN': 'MSI', 'USERDOMAIN_ROAMINGPROFILE': 'MSI', 'USERNAME': 'ethan', 'USERPROFILE': 'C:\\Users\\ethan', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'VIRTUAL_ENV': 'C:\\School\\Toegepaste_Informatica\\3ITCSC\\Ethical Hacking\\Python\\Project\\venv', 'WINDIR': 'C:\\WINDOWS', 'ZES_ENABLE_SYSMAN': '1', '_OLD_VIRTUAL_PATH': 'C:\\Anaconda\\condabin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8\\libnvvp;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\libnvvp;C:\\Program Files (x86)\\VMware\\VMware Workstation\\bin\\;C:\\Program Files\\Eclipse Foundation\\jdk-8.0.302.8-hotspot\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\\libnvvp;C:\\Python39\\Scripts\\;C:\\Python39\\;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\;C:\\Program Files\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\Microsoft Network Monitor 3\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\nodejs\\;C:\\Program Files\\NVIDIA Corporation\\NVIDIA NvDLISR;C:\\R\\rtools40\\\\usr\\bin\\;C:\\Program Files\\PuTTY\\;C:\\Program Files\\dotnet\\;C:\\Program Files\\Mullvad VPN\\resources;C:\\Program Files\\Amazon\\AWSCLIV2\\;C:\\Program Files\\Amazon\\AWSSAMCLI\\bin\\;C:\\Program Files\\NVIDIA Corporation\\Nsight Compute 2022.3.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Users\\ethan\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\ethan\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\ethan\\AppData\\Local\\GitHubDesktop\\bin;C:\\Program Files (x86)\\GitHub CLI\\;C:\\Users\\ethan\\.dotnet\\tools;C:\\Users\\ethan\\AppData\\Roaming\\npm;C:\\R\\rtools40\\\\usr\\bin\\;C:\\Users\\ethan\\AppData\\Local\\gitkraken\\bin;C:\\Users\\ethan\\.dotnet\\tools;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\libnvvp;', '_OLD_VIRTUAL_PROMPT': '$P$G'})